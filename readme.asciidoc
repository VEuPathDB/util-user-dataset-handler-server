= Exporter Script Server

Exposes configured exporter / validation scripts over HTTP.

== Usage

TODO

== Configuration

=== General Config

TODO

=== Command Config

The command or commands the server is to run on request are configurable through
the application's `config.yml` file in the `commands` array.

These commands will be executed sequentially in the order they are defined.  If
any of the commands fails, the execution will stop there, and a response will be
returned to the caller.

Commands will be given a shared execution environment, meaning environment
variables set by a script will be visible to subsequent scripts.

.Example
[source, yaml]
----
commands:
  - command: some-command
    args: [
      '--date="<<date>>"',
      '<<input-files>>'
    ]
----

When defining a command there are template variables that can be used to provide
details about the request or general process to the command.  These are defined
in `\<<angle brackets>>`.

==== Template Variables

If any of the following template variables are encountered in the definition of
a command, they will be replaced with a value as defined below.

===== Date & Time

`\<<date>>`::
  The date the request started formatted in UTC time as `YYYY-MM-DD`.  Example:
  `1999-10-31`.

`\<<time>>`::
  The time the request started formatted in UTC time as `HH:MM:SS`.  Example:
  `16:05:48`.

`\<<date-time>>`::
  The date & time the request started in UTC time formatted according to
  ISO 8601.  Example `1999-10-31T16:05:48Z`

`\<<timestamp>>`::
  The Unix timestamp (in seconds) in UTC time.  Example: `941385948`.

===== Request Details

`\<<user-id>>`::
  The WDK user ID of the user that initiated the request.

`\<<request-id>>`::
  The unique identifier assigned to this request.  Format will be UUID v4.
  Example: `b79822e9-0161-4de3-93f5-dfdb79c17f5d`

===== Workspace / File Info

`\<<input-files>>`:: The list of uploaded files sorted by name in ascending
order.  When used in this form, the list will be injected as a space separated
string.
+
Additionally, this template variable can be accessed as a zero-indexed array to
get the name of an individual input file.  Example: `\<<input-files[0]>>`.
+
NOTE: The expected number of files will depend on the script itself and it's
      expectations.

`\<<cwd>>`:: The path to the working directory for the request.

`\<<output-files>>`:: The list of files created by the previous command in the
order reported by the command.  When used in this form, the list will be
injected as a space separated string.
+
Additionally, this template variable can be accessed as either a one or two
dimensional array with the following behavior:
+
`\<<output-files[x]>>`
+
Use as a one-dimensional array will allow access to the files output by command
`x` in the list of defined commands.  `x` is the 0 based integer index of the
defined command.  Used in this form, the injected string will be a space
separated file list.
+
`\<<output-files[x][y]>>`
+
Use as a two-dimensional array allows access to specific file names from
specific previous commands.  Similar to `\<<input-files[x]>>`.  Here `x` is the
zero-based index of the command in the defined command list and `y` is the
zero-based index of the file name in the list of output files.

=== Script Expectations

The scripts run will be expected to follow the following rules to correctly
comply with the server's expectations.

TODO